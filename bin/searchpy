#!/usr/bin/env python3

# -*- coding: utf-8 -*-

import os
import sys

_MAIN_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(_MAIN_DIR)

import signal
import logging
from argparse import ArgumentParser
from github.github import SearchCode


def log_configurer():
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(fmt='%(message)s'))
    root = logging.getLogger(__package__)
    root.addHandler(handler)
    root.setLevel(logging.INFO)


def get_args():
    parser = ArgumentParser()
    parser.add_argument('--no-resume', action='store_true', default=False,
                        help='prevent the program from loading and resuming from previous incomplete running state, '
                             'also not allow it to save its running state if being suddenly stopped')
    parser.add_argument('--verbose', action='store_true', default=False,
                        help='Displays searching progress in verbose')
    return parser.parse_args()


def main():
    def exit_handler(*_):
        search.end()

    signal.signal(signal.SIGTERM, exit_handler)

    args = get_args()
    search = SearchCode(resume=not args.no_resume, verbose=args.verbose)
    search.run()

    try:
        search.wait_until_finish()
    except KeyboardInterrupt:
        search.end()
    except Exception:
        search.end()
        raise


if __name__ == '__main__':
    log_configurer()
    sys.exit(main())
