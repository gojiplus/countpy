#!/usr/bin/env python3

# -*- coding: utf-8 -*-

import os
import sys
import signal
from argparse import ArgumentParser

_MODULE_DIR = os.path.dirname(os.path.abspath(__file__))
_MAIN_DIR = os.path.dirname(_MODULE_DIR)
sys.path.append(_MAIN_DIR)

from modules.search import SearchCode

LOG_FILENAME = 'searchpy.log'


def get_args():
    # Setup arguments
    parser = ArgumentParser()

    parser.add_argument('--no-resume', action='store_true', default=False,
                        help='Prevent the program from loading and resuming '
                             'from previous incomplete running state, also '
                             'not allow it to save its running state if being '
                             'suddenly stopped.')

    parser.add_argument('--verbose', action='store_true', default=False,
                        help='Displays searching progress in verbose')

    parser.add_argument('--search-only', action='store_true', default=False,
                        help='Only searches for repositories from Github '
                             'without retrieving contents.')

    parser.add_argument('--retrieve-only', action='store_true', default=False,
                        help='Only does retrieving contents for all '
                             'repositories stored in database.')

    parser.add_argument('--anonymous', action='store_true', default=False,
                        help='Connect to Github without authentication.')

    parser.add_argument('--threads', metavar='NUM', type=int, default=1,
                        help='Number of threads running, used only if '
                             '"--anonymous" exists (default is 1).')

    parser.add_argument('--log-to-file', action='store_true', default=False,
                        help='Write running progress into "searchpy.log"')

    # Parse arguments
    args = parser.parse_args()

    # Detect running mode
    if args.search_only and args.retrieve_only:
        parser.error('Using "--search-only" and "--retrieve-only" in one '
                     'command is not allowed.')
    elif args.search_only:
        args.mode = 'search-only'
    elif args.retrieve_only:
        args.mode = 'retrieve-only'
    else:
        args.mode = None

    # Whether to log progress into file
    if args.log_to_file:
        args.logfile = os.path.join(_MODULE_DIR, LOG_FILENAME)
    else:
        args.logfile = None

    # Return input arguments
    return args


def main():
    def exit_handler(*_):
        search.end()

    signal.signal(signal.SIGTERM, exit_handler)
    args = get_args()

    search = SearchCode(
        resume=not args.no_resume,
        verbose=args.verbose,
        mode=args.mode,
        anonymous=args.anonymous,
        threads=args.threads,
        logfile=args.logfile
    )
    search.run()

    try:
        search.wait_until_finish()
    except KeyboardInterrupt:
        search.end()
    except Exception:
        search.end()
        raise


if __name__ == '__main__':
    sys.exit(main())
